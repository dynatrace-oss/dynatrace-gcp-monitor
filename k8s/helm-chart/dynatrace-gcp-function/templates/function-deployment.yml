#     Copyright 2020 Dynatrace LLC
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: dynatrace-gcp-function-sa
  namespace: {{ .Release.Namespace }}
  "annotations": {
    "iam.gke.io/gcp-service-account" : dynatrace-gcp-function-sa@{{ .Values.gcpProjectId }}.iam.gserviceaccount.com
  }
automountServiceAccountToken: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dynatrace-gcp-function
  namespace: {{ .Release.Namespace }}
  labels:
    app: dynatrace-gcp-function
spec:
  selector:
    matchLabels:
      app: dynatrace-gcp-function
  replicas: 1
  template:
    metadata:
      labels:
        app: dynatrace-gcp-function
      annotations:
        "version" : "1"
        checksum/config: {{ include (print $.Template.BasePath "/function-config.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/function-secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: dynatrace-gcp-function-sa
      automountServiceAccountToken: false
      {{- if or (eq .Values.deploymentType "metrics") (eq .Values.deploymentType "all") }}
      volumes:
      - name: gcp-config
        configMap:
          name: dynatrace-gcp-function-config
          items:
          - key: GCP_SERVICES_YAML
            path: "gcp_services.yaml"
      {{- end }}
      containers:
      {{- if or (eq .Values.deploymentType "metrics") (eq .Values.deploymentType "all") }}
      - image: {{ .Values.dockerImage | quote }}
        name: dynatrace-gcp-function-metrics      
        imagePullPolicy: Always
        env:
        - name: OPERATION_MODE
          value: Metrics
        - name: PRINT_METRIC_INGEST_INPUT
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: PRINT_METRIC_INGEST_INPUT
        - name: GCP_PROJECT
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: GCP_PROJECT
        - name: REQUIRE_VALID_CERTIFICATE
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: REQUIRE_VALID_CERTIFICATE
        - name: SERVICE_USAGE_BOOKING
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: SERVICE_USAGE_BOOKING
        {{- if (.Values.useProxy) }}
        - name: USE_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: USE_PROXY
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: HTTP_PROXY
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: HTTPS_PROXY
        {{- end }}
        - name: IMPORT_DASHBOARDS
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: IMPORT_DASHBOARDS
        - name: IMPORT_ALERTS
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: IMPORT_ALERTS
        - name: DYNATRACE_ACCESS_KEY_SECRET_NAME
          value: DYNATRACE_ACCESS_KEY
        - name: DYNATRACE_URL_SECRET_NAME
          value: DYNATRACE_URL
        - name: DYNATRACE_URL
          valueFrom:
            secretKeyRef:
              name: dynatrace-gcp-function-secret
              key: url
        - name: DYNATRACE_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: dynatrace-gcp-function-secret
              key: access-key
        - name: SELF_MONITORING_ENABLED
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: SELF_MONITORING_ENABLED
        - name: HEALTH_CHECK_PORT
          value: "8080"
        volumeMounts:
        - mountPath: /code/config/activation
          readOnly: true
          name: gcp-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
      {{- end }}
      {{- if or (eq .Values.deploymentType "logs") (eq .Values.deploymentType "all") }}
      - image: {{ .Values.dockerImage | quote }}
        name: dynatrace-gcp-function-logs
        imagePullPolicy: Always
        env:
        - name: OPERATION_MODE
          value: Logs
        - name: GCP_PROJECT
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: GCP_PROJECT
        - name: LOGS_SUBSCRIPTION_ID
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: LOGS_SUBSCRIPTION_ID
        - name: DYNATRACE_LOG_INGEST_CONTENT_MAX_LENGTH
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: DYNATRACE_LOG_INGEST_CONTENT_MAX_LENGTH
        - name: DYNATRACE_LOG_INGEST_ATTRIBUTE_VALUE_MAX_LENGTH
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: DYNATRACE_LOG_INGEST_ATTRIBUTE_VALUE_MAX_LENGTH
        - name: DYNATRACE_LOG_INGEST_REQUEST_MAX_EVENTS
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: DYNATRACE_LOG_INGEST_REQUEST_MAX_EVENTS
        - name: DYNATRACE_LOG_INGEST_REQUEST_MAX_SIZE
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: DYNATRACE_LOG_INGEST_REQUEST_MAX_SIZE
        - name: DYNATRACE_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: DYNATRACE_TIMEOUT_SECONDS
        - name: REQUIRE_VALID_CERTIFICATE
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: REQUIRE_VALID_CERTIFICATE
        - name: DYNATRACE_ACCESS_KEY_SECRET_NAME
          value: DYNATRACE_ACCESS_KEY
        - name: DYNATRACE_LOG_INGEST_URL_SECRET_NAME
          value: DYNATRACE_LOG_INGEST_URL
        - name: DYNATRACE_LOG_INGEST_URL
          valueFrom:
            secretKeyRef:
              name: dynatrace-gcp-function-secret
              key: log-ingest-url
        - name: DYNATRACE_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: dynatrace-gcp-function-secret
              key: access-key
        - name: SELF_MONITORING_ENABLED
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: SELF_MONITORING_ENABLED
        {{- if (.Values.useProxy) }}
        - name: USE_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              key: USE_PROXY
        # the PubSub uses gPRC so both variables have to be set
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              {{- if .Values.httpProxy }}
              key: HTTP_PROXY
              {{- else }}
              key: HTTPS_PROXY
              {{- end }}
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: dynatrace-gcp-function-config
              {{- if .Values.httpsProxy }}
              key: HTTPS_PROXY
              {{- else }}
              key: HTTP_PROXY
              {{- end }}
        - name: NO_PROXY
          value: {{ template "noProxyUrls" . }}
        {{- end }}
        - name: HEALTH_CHECK_PORT
          value: "8081"
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
        startupProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 10
      {{- if (eq .Values.activeGate.useExisting "false") }}
      initContainers:
        - name: init-active-gate-service
          image: busybox:1.33.1
          command: [ 'sh', '-c', "until nslookup dynatrace-activegate-gcpmon-clusterip; do echo waiting for AG service; sleep 2; done" ]
        - name: init-active-gate
          image: radial/busyboxplus:curl
          command: [ 'sh', '-c', 'until [ $(curl  https://dynatrace-activegate-gcpmon-clusterip:9999/rest/state -k)  == "RUNNING" ];do echo "Checking for Running Status";echo "Response = $AG_RESPONE.";sleep 2;done;echo "AG running"' ]
       {{- end }}
      {{- end }}
